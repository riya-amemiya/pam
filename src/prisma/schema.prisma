generator client {
  provider = "prisma-client-js"
  encrypt  = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  GitHub           String?
  Twitter          String?
  Facebook         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  Post             Post[]
  sessions         Session[]
  UserRelationRole UserRelationRole[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  published       Boolean           @default(false)
  title           String
  content         String?
  authorId        String?
  author          User?             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  PostRelationTag PostRelationTag[]
}

model Role {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             RoleName           @unique
  UserRelationRole UserRelationRole[]

  @@unique([id, name])
}

model UserRelationRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roleName  RoleName
  role      Role     @relation(fields: [roleName], references: [name])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String            @unique
  PostRelationTag PostRelationTag[]

  @@unique([id, name])
}

model PostRelationTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  tagName   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagName], references: [name])
}

enum RoleName {
  ADMIN
  USER
  STUDENT
  TEACHER
  PARENT
}
